/*
 * protocol.h
 *
 *  Created on: Dec 17, 2023
 *      Author: xuanthodo
 */

#ifndef INC_APP_PROTOCOL_H_
#define INC_APP_PROTOCOL_H_

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>

#define START_BYTE 0x78
#define STOP_BYTE 0x79
#define DATA_MAX_LENGTH 	255
#define TX_BUFFER_MAX_LENGTH	512
#define RX_BUFFER_MAX_LENGTH	1024
#define RX_TIMEOUT_MS				500			// 1000ms

typedef struct {
	uint8_t protocol_id;
	uint8_t data_len;
	uint8_t data[DATA_MAX_LENGTH];
}PROTOCOL_t;

typedef enum {
	PROTOCOL_ID_CMD_MIN = 0x00,
	// Generic Command
	PROTOCOL_ID_CMD_RESET = 0x01,
	PROTOCOL_ID_CMD_REQUEST_VERSION = 0x02,

	// Ota Command
	PROTOCOL_ID_CMD_OTA_START_REPROGRAMMING = 0xE0,
	PROTOCOL_ID_CMD_OTA_STOP_REPROGRAMMING = 0xE1,
	PROTOCOL_ID_CMD_OTA_TRANSFER_DATA = 0xE2,

	PROTOCOL_ID_CMD_MAX,

	//  Ota Status
	PROTOCOL_ID_STS_OTA_STATUS = 0xF0,

	PROTOCOL_ID_MAX
}PROTOCOL_Id_t;


typedef enum {
  PROTOCOL_RESULT_SUCCESS = 0x00,
  PROTOCOL_RESULT_ERROR = 0x01,
  PROTOCOL_RESULT_COMM_PROTOCOL_ID_INVALID = 0x10,
  PROTOCOL_RESULT_COMM_PROTOCOL_CRC_INVALID = 0x11,
  PROTOCOL_RESULT_COMM_PROTOCOL_START_STOP_BYTE_INVALID = 0x12,
  PROTOCOL_RESULT_COMM_PROTOCOL_DATA_LEN_INVALID = 0x13,
  PROTOCOL_RESULT_COMM_PROTOCOL_TIMEOUT = 0x14,
  PROTOCOL_RESULT_CMD_RESET_TIMEOUT = 0x20,
  PROTOCOL_RESULT_CMD_TRANSFER_OTA_DATA_IN_PROGRESS = 0x21,
  PROTOCOL_RESULT_CMD_OTA_ADDRESS_INVALID = 0x22,

} PROTOCOL_ResultCode_t;

void PROTOCOL_init(void);
void PROTOCOL_run(void);
bool PROTOCOL_send(PROTOCOL_t *proto);
bool PROTOCOL_receive(PROTOCOL_t * proto);


#endif /* INC_APP_PROTOCOL_H_ */
